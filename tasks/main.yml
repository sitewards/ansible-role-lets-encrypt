---
- include: "dependencies.yml"

# See http://docs.ansible.com/ansible/latest/playbooks_filters.html#extracting-values-from-containers
- name: "Create the list of domains valid for this certificate"
  set_fact:
    lets_encrypt_domains: "{{ lets_encrypt_resources | json_query('[*].domain') | list }}"
- name: "Create the list of alt domains valid for this certificate"
  set_fact:
    lets_encrypt_subject_alt_names: "{{ lets_encrypt_domains | map('regex_replace', '^(.*)$', 'DNS:\\1') | list }}"

- name: "Check the validity and expiry"
  openssl_certificate:
    valid_in: "{{ lets_encrypt_renew_limit * 3600 }}"
    path: "/etc/ssl/certs/{{ lets_encrypt_resource_name }}.crt"
    provider: assertonly
    has_expired: no
    subject_alt_name: "{{ lets_encrypt_subject_alt_names }}"
    subject_alt_name_strict: yes
  ignore_errors: yes
  register: lets_encrypt_validity_check

# Create the /.well-known/acme-challenge dir
- include: "wellknown.yml"
  vars:
    lets_encrypt_resource_state: present
  when:
    - lets_encrypt_challenge_type == 'http-01'
    - lets_encrypt_validity_check.failed == true


- include: "lets_encrypt.yml"
  when:
    - lets_encrypt_common_name is not undefined
    - lets_encrypt_validity_check.failed == true


# Remove the /.well-known/acme-challenge dir
- include: "wellknown.yml"
  vars:
    lets_encrypt_resource_state: absent
  when:
    - lets_encrypt_challenge_type == 'http-01'
    - lets_encrypt_validity_check.failed == true

# Concatenate crt & key for HAproxy SSL support
- include: "haproxy.yml"
  when:
    - lets_encrypt_ssl_mode == 'haproxy'
    - lets_encrypt_common_name is not undefined
    - lets_encrypt_challenge_type == 'http-01'
    - lets_encrypt_validity_check.failed == true
