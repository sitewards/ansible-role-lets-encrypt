---
## The python package for pyopenssl; a requirement for the openssl task
lets_encrypt_python_package: "python3-openssl"

lets_encrypt_agreement: "https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf"

## The account email for Lets Encrypt.
## (Required)
# lets_encrypt_account_email:

## The directory used for Lets Encrypt to generate certificates
## Defaults to staging for testing.
lets_encrypt_mode: "stage"
lets_encrypt_url_prod: "https://acme-v01.api.letsencrypt.org/directory" # PROD
lets_encrypt_url_stage: "https://acme-staging.api.letsencrypt.org/directory" # STAGE

lets_encrypt_directory: "{{ vars['lets_encrypt_url_'+lets_encrypt_mode] }}" # set STAGE or PROD URL

## How many days before the certificate expires it should be renewed
lets_encrypt_renew_limit: 30

## The resource name. Most often, this will be the fqdn of the site.
lets_encrypt_resource_name: "website"

## The type of challenge that Lets Encrypt performs to check the server exists.
## Should be one of:
## - http-01
## - dns-01
## - tls-sni-02
lets_encrypt_challenge_type: "dns-01"

## The type of the ssl services for SSL generation
# - haproxy
# - nginx # not yet implemented
# - apache # not yet implemented
lets_encrypt_ssl_mode: "haproxy"

## The common or "root" name of this TLS certificate
## (Required)
# lets_encrypt_common_name:

## A list of the domains that are to be configured. At least one of the following is required:
##   The FQDN domain that will be added to the certificate.
##
#  - domain: www.sitewards.com
##
##   Provider specific configuration. The minimal required for this is "type". Each type has it's own, specific
##   configuration; the below example is for AWS Route53, but each is different. See the top of the provider file
##   for specific notes.
##
#    provider:
##
##     The mechanism by which the provider will be configured. Can be one of:
##       - dns-01
##       - tls-sni-01
##       - http-01
##
#      mechanism: dns-01
##
##     The method that will be used to configure the provider
##
#      type: route53
##
##     Service specific configuration. See the top of the service configuration files for the format.
##
#      configuration:
##
lets_encrypt_resources: [""]
#  - domain: "sitewards.com"
#    provider:
#      mechanism: "dns-01"
#      type: "route53"
#      configuration:
#        zone: "sitewards.com"

## The country name for the CSR. A full list of country codes can be found here:
## https://clients.hostingireland.ie/knowledgebase/2042/2-letter-country-codes-for-CSR-generation.html
## (Required)
# lets_encrypt_csr_country_name: "DE"

## The state (locality) of the organisation for the CSR
## (Required)
# lets_encrypt_csr_locality_name: "Hessen"

## The organisation responsible for the service behind TLS
## (Required)
# lets_encrypt_csr_organization_name:

## The organisational unit responsible for the service behind TLS
## (Required)
# lets_encrypt_csr_organizational_unit_name

## The email address of the CSR to use
## (Required)
# lets_encrypt_csr_email_address: "example.user@sitewards.com"

# At least some of the below options are required. See README for further details.

## The DNS provider used to validate the request. Can be one of:
## - route53
# lets_encrypt_validation_provider:

## The path to the public directory used to validate the Lets Encrypt resources
## (Currently unused)
# lets_encrypt_http_path:

# Cloud specific options. May be required, depending on the mechanism used to prove identity of the connctoin.

## The AWS IAM users access key
# lets_encrypt_aws_access_key_id

## The AWS IAM users
# lets_encrypt_aws_secret_access_key

## The AWS Route53 zone to modify during provisioning
# lets_encrypt_aws_route53_dns_zone


## Azure access credentials

## Azure client ID. Use when authenticating with a Service Principal.
lets_encrypt_resource_azure_client_id: ""

## Azure client secret. Use when authenticating with a Service Principal.
lets_encrypt_resource_azure_client_secret: ""

## Azure subscription ID
lets_encrypt_resource_azure_subscription_id: ""

## Azure tenant ID. Use when authenticating with a Service Principal.
lets_encrypt_resource_azure_tenant_id: ""

## Azure reource group name
lets_encrypt_resource_azure_resource_group: ""
